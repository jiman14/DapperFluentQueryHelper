<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DapperFluentQueryHelper</name>
    </assembly>
    <members>
        <member name="M:DapperFluentQueryHelper.Core.DFilteredQuery.P(DapperFluentQueryHelper.Core.DapperFluentFilters)">
            <summary>
            Parenthesis: ( ... )
            </summary>
            <param name="filters"></param>
            <returns></returns>
        </member>
        <member name="M:DapperFluentQueryHelper.Core.DFilteredQuery.PNot(DapperFluentQueryHelper.Core.DapperFluentFilters)">
            <summary>
            Parenthesis Not: NOT ( ... )
            </summary>
            <param name="filters"></param>
            <returns></returns>
        </member>
        <member name="M:DapperFluentQueryHelper.Core.DFilteredQuery.And(DapperFluentQueryHelper.Core.DapperFluentFilter[])">
            <summary>
            And filter join: filter1 AND filter2 AND ...
            </summary>
            <param name="filters"></param>
            <returns></returns>
        </member>
        <member name="M:DapperFluentQueryHelper.Core.DFilteredQuery.And(DapperFluentQueryHelper.Core.DapperFluentFilters[])">
            <summary>
            And filters join: (filter1 AND filter2) AND (filter3 OR filter4) ...
            </summary>
            <param name="filters"></param>
            <returns></returns>
        </member>
        <member name="M:DapperFluentQueryHelper.Core.DFilteredQuery.Or(DapperFluentQueryHelper.Core.DapperFluentFilters[])">
            <summary>
            OR filter join: And: filter1 OR filter2 OR ...
            </summary>
            <param name="filters"></param>
            <returns></returns>
        </member>
        <member name="M:DapperFluentQueryHelper.Core.DFilteredQuery.Or(DapperFluentQueryHelper.Core.DapperFluentFilter[])">
            <summary>
            OR filters join: (filter1 AND filter2) OR (filter3 OR filter4) ...
            </summary>
            <param name="filters"></param>
            <returns></returns>
        </member>
        <member name="F:DapperFluentQueryHelper.Core.NetTypesToDBConversions.NetTypes">
            <summary>
            Net types array
            </summary>
        </member>
        <member name="M:DapperFluentQueryHelper.Core.DSelect.Join``1(System.String,DapperFluentQueryHelper.Core.JoinOperator,System.String)">
            <summary>
            Join: JOIN rightJoinFieldTable ON leftJoinField joinOperator rightJoinField. 
            </summary>
            <param name="leftJoinField"></param>
            <param name="joinOperator"></param>
            <param name="rightJoinField"></param>
            <returns></returns>
        </member>
        <member name="M:DapperFluentQueryHelper.Core.DSelect.AddJoinFilter(System.Boolean,System.String,DapperFluentQueryHelper.Core.JoinOperator,System.String)">
            <summary>
            Join: JOIN rightJoinFieldTable ON (leftJoinField joinOperator rightJoinField AND () 
            FQ.Person.IdentifierTypeId, JoinOperator.Equals, FQ.IdentifierType.Id
            </summary>
            <param name="joinFilters"></param>
            <returns></returns>
        </member>
        <member name="M:DapperFluentQueryHelper.Core.DSelect.OrderBy(System.String[])">
            <summary>
            Fill orderColumns param with direction intercalated with (Ascending or Descending), for ex.: ID,Ascending,CREATION_DATE,Descending 
            Or fill orderColumns param with direction intercalated with (true or false), for ex.: ID,true,CREATION_DATE,false 
            Or fill orderColumns param with direction intercalated with (asc or desc), for ex.: ID,asc,CREATION_DATE,desc
            In no direction is specified, default order is asc.
            </summary>
            <param name="orderFields"></param>
            <returns></returns>
        </member>
        <member name="M:DapperFluentQueryHelper.Core.DSelect.LimitOne">
            <summary>
            OFFSET 0 ROWS FETCH NEXT 1 ROWS ONLY
            </summary>
            <returns></returns>
        </member>
        <member name="M:DapperFluentQueryHelper.Core.DSelect.Limit(System.Int32)">
            <summary>
            OFFSET 0 ROWS FETCH NEXT {nRows} ROWS ONLY
            </summary>
            <param name="nRows"></param>
            <returns></returns>
        </member>
        <member name="M:DapperFluentQueryHelper.Core.DSelect.Limit(System.Int32,System.Int32)">
            <summary>
            OFFSET {offset} ROWS FETCH NEXT {nRows} ROWS ONLY
            </summary>
            <param name="offset"></param>
            <param name="nRows"></param>
            <returns></returns>
        </member>
    </members>
</doc>
